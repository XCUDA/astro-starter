---
// GridContainer.astro - Responsive Grid System Component 
// 12-column responsive grid with 4 container variants and flexible spacing
// Path: src/components/layouts/GridContainer.astro

export interface Props {
  variant?: 'default' | 'wide' | 'full' | 'narrow';
  columns?: 1 | 2 | 3 | 4 | 6 | 12;
  gap?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  alignItems?: 'start' | 'center' | 'end' | 'stretch';
  justifyContent?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
  class?: string;
  id?: string;
}

const {
  variant = 'default',
  columns = 12,
  gap = 'md',
  alignItems = 'stretch',
  justifyContent = 'start',
  class: className = '',
  id
} = Astro.props;

// Container width variants
const containerVariants = {
  default: 'container mx-auto px-4',           // Standard container with padding
  wide: 'max-w-7xl mx-auto px-6',            // Wider for landing pages
  full: 'w-full px-4',                       // Full width with minimal padding
  narrow: 'max-w-4xl mx-auto px-4'          // Narrower for content-focused layouts
};

// Gap variants for grid spacing
const gapVariants = {
  none: 'gap-0',
  sm: 'gap-2 md:gap-4',
  md: 'gap-4 md:gap-6',
  lg: 'gap-6 md:gap-8',
  xl: 'gap-8 md:gap-12'
};

// Responsive grid columns - automatically responsive
const columnVariants = {
  1: 'grid-cols-1',
  2: 'grid-cols-1 md:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4',
  6: 'grid-cols-2 md:grid-cols-3 lg:grid-cols-6',
  12: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
};

// Alignment utilities
const alignVariants = {
  start: 'items-start',
  center: 'items-center', 
  end: 'items-end',
  stretch: 'items-stretch'
};

const justifyVariants = {
  start: 'justify-start',
  center: 'justify-center',
  end: 'justify-end',
  between: 'justify-between',
  around: 'justify-around',
  evenly: 'justify-evenly'
};

// Build the complete class string
const containerClass = containerVariants[variant];
const gridClass = `grid ${columnVariants[columns]} ${gapVariants[gap]} ${alignVariants[alignItems]} ${justifyVariants[justifyContent]}`;
const finalClassName = `${containerClass} ${className}`.trim();
---

<div 
  class={finalClassName}
  id={id}
>
  <div class={gridClass}>
    <slot />
  </div>
</div>

<!-- 
Usage Examples:

// Basic Grid
<GridContainer>
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</GridContainer>

// 3-Column Business Layout
<GridContainer columns={3} gap="lg" variant="wide">
  <div>Service 1</div>
  <div>Service 2</div>
  <div>Service 3</div>
</GridContainer>

// Feature Cards Layout
<GridContainer columns={4} gap="xl" alignItems="start">
  <Card>Feature 1</Card>
  <Card>Feature 2</Card>
  <Card>Feature 3</Card>
  <Card>Feature 4</Card>
</GridContainer>

// Full Width Hero Section
<GridContainer variant="full" columns={2} alignItems="center">
  <div>Hero Content</div>
  <div>Hero Image</div>
</GridContainer>

// Narrow Content Layout
<GridContainer variant="narrow" columns={1}>
  <div>Focused Content</div>
</GridContainer>
-->