---
// Navigation.astro - Advanced Responsive Navigation System (Fixed TypeScript)
// Enhanced with animations, touch gestures, and intelligent breakpoint management
// Path: src/components/layouts/Navigation.astro

export interface Props {
  currentPage?: string;
  variant?: 'default' | 'mega' | 'minimal' | 'business';
  showMobileDrawer?: boolean;
  enableTouchGestures?: boolean;
  showBreadcrumbs?: boolean;
}

const { 
  currentPage, 
  variant = 'default',
  showMobileDrawer = true,
  enableTouchGestures = true,
  showBreadcrumbs = false
} = Astro.props;

// Enhanced navigation configuration with categories for mega menu support
const navigationConfig = {
  main: [
    {
      name: "home",
      title: "Home",
      href: "/",
      description: "Homepage with all features overview",
      icon: "üè†"
    }
  ],
  
  showcases: [
    {
      name: "form-showcase",
      title: "Form Components",
      href: "/form-showcase",
      description: "Interactive forms with validation",
      icon: "üìù",
      category: "components"
    },
    {
      name: "navigation-showcase", 
      title: "Navigation & Feedback",
      href: "/navigation-showcase",
      description: "Navigation and user feedback systems",
      icon: "üß≠",
      category: "components"
    },
    {
      name: "data-display-showcase",
      title: "Data Display", 
      href: "/data-display-showcase",
      description: "Tables, avatars, tooltips and accordions",
      icon: "üìä",
      category: "components"
    },
    {
      name: "advanced-showcase",
      title: "Advanced Components",
      href: "/advanced-showcase",
      description: "Calendar, Command, Sonner and advanced UI",
      icon: "üîÆ",
      category: "components"
    },
    {
      name: "business-demo",
      title: "Business Demo",
      href: "/business-demo",
      description: "See all business variants and potential in action",
      icon: "üíº",
      category: "demo"
    },
    {
      name: "layout-showcase",
      title: "Layout System",
      href: "/layout-showcase",
      description: "Headers, footers, navigation and layouts",
      icon: "üèóÔ∏è",
      category: "layout"
    },
    {
      name: "grid-showcase",
      title: "Grid System",
      href: "/grid-showcase",
      description: "Grid layouts and flexible components",
      icon: "üìê",
      category: "layout"
    },
    {
      name: "components-showcase",
      title: "All Components",
      href: "/components-showcase", 
      description: "Complete component library",
      icon: "üß©",
      category: "overview"
    }
  ],

  resources: [
    {
      name: "documentation",
      title: "Documentation", 
      href: "/docs",
      description: "Complete guides and references",
      icon: "üìö",
      category: "docs"
    },
    {
      name: "quick-start",
      title: "Quick Start",
      href: "/quick-start", 
      description: "Get up and running in minutes",
      icon: "‚ö°",
      category: "docs"
    }
  ]
};

// Combine all navigation items for processing
const allNavItems = [
  ...navigationConfig.main,
  ...navigationConfig.showcases, 
  ...navigationConfig.resources
];

const isCurrentPage = (itemName: string) => currentPage === itemName;

// Generate breadcrumbs based on current page
const generateBreadcrumbs = () => {
  if (!currentPage || currentPage === 'home') return [];
  
  const currentItem = allNavItems.find(item => item.name === currentPage);
  if (!currentItem) return [];
  
  return [
    { name: "Home", href: "/" },
    { name: currentItem.title, href: currentItem.href }
  ];
};

const breadcrumbs = showBreadcrumbs ? generateBreadcrumbs() : [];
---

<nav class="w-full border-b bg-background/80 backdrop-blur-sm sticky top-0 z-50 transition-all duration-300" id="main-navigation">
  <div class="container mx-auto px-4">
    
    <div class="flex items-center justify-between h-16">
      
      <a 
        href="/" 
        class="flex items-center space-x-3 text-lg font-semibold hover:text-primary transition-all duration-200 hover:scale-105 group"
        aria-label="Astro Starter Homepage"
      >
        <div class="w-8 h-8 bg-gradient-to-br from-primary to-primary/70 rounded-lg flex items-center justify-center text-primary-foreground font-bold transition-all duration-200 group-hover:shadow-lg group-hover:shadow-primary/25">
          ‚ö°
        </div>
        <span class="hidden sm:block">Astro Starter</span>
      </a>

      <div class="hidden lg:flex items-center space-x-1">
        
        <a
          href="/"
          class={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
            isCurrentPage('home') || !currentPage
              ? 'bg-primary text-primary-foreground shadow-sm' 
              : 'text-muted-foreground hover:text-foreground hover:bg-muted/50 hover:scale-105'
          }`}
          aria-label="Homepage"
          aria-current={isCurrentPage('home') ? 'page' : undefined}
        >
          <span>üè†</span>
          <span>Home</span>
        </a>

        <div class="relative group">
          <button
            class="flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-all duration-200 hover:scale-105"
            aria-label="Components showcases menu"
            aria-expanded="false"
          >
            <span>üß©</span>
            <span>Components</span>
            <svg class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
          
          <div class="absolute top-full left-0 mt-2 w-80 bg-card/95 backdrop-blur-sm border border-border rounded-lg shadow-lg opacity-0 invisible transition-all duration-300 transform translate-y-2 group-hover:opacity-100 group-hover:visible group-hover:translate-y-0">
            <div class="p-4 grid grid-cols-1 gap-2">
              {navigationConfig.showcases.map(showcase => (
                <a
                  href={showcase.href}
                  class={`flex items-start space-x-3 p-3 rounded-lg transition-all duration-200 hover:bg-muted/50 hover:scale-105 ${
                    isCurrentPage(showcase.name) 
                      ? 'bg-primary/10 border border-primary/20' 
                      : ''
                  }`}
                  aria-current={isCurrentPage(showcase.name) ? 'page' : undefined}
                >
                  <span class="text-lg mt-0.5">{showcase.icon}</span>
                  <div class="flex-1 min-w-0">
                    <div class="font-medium text-foreground flex items-center space-x-2">
                      <span>{showcase.title}</span>
                      {isCurrentPage(showcase.name) && (
                        <span class="text-xs bg-primary text-primary-foreground px-2 py-0.5 rounded">current</span>
                      )}
                    </div>
                    <div class="text-xs text-muted-foreground mt-1">
                      {showcase.description}
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>

        <div class="relative group">
          <button
            class="flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-all duration-200 hover:scale-105"
            aria-label="Resources menu"
          >
            <span>üìö</span>
            <span>Resources</span>
            <svg class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
          
          <div class="absolute top-full left-0 mt-2 w-64 bg-card/95 backdrop-blur-sm border border-border rounded-lg shadow-lg opacity-0 invisible transition-all duration-300 transform translate-y-2 group-hover:opacity-100 group-hover:visible group-hover:translate-y-0">
            <div class="p-3">
              {navigationConfig.resources.map(resource => (
                <a
                  href={resource.href}
                  class="flex items-center space-x-3 p-2 rounded-lg transition-all duration-200 hover:bg-muted/50"
                >
                  <span class="text-lg">{resource.icon}</span>
                  <div>
                    <div class="font-medium text-foreground">{resource.title}</div>
                    <div class="text-xs text-muted-foreground">{resource.description}</div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>

      {showMobileDrawer && (
        <button 
          class="lg:hidden p-2 rounded-lg text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-all duration-200 hover:scale-105 group"
          aria-label="Toggle mobile menu"
          onclick="toggleNavMobileDrawer()"
          id="nav-mobile-menu-button"
        >
          <div class="w-6 h-6 relative">
            <span class="absolute top-1 left-0 w-6 h-0.5 bg-current transition-all duration-300 group-hover:w-5"></span>
            <span class="absolute top-2.5 left-0 w-6 h-0.5 bg-current transition-all duration-300"></span>
            <span class="absolute top-4 left-0 w-6 h-0.5 bg-current transition-all duration-300 group-hover:w-4"></span>
          </div>
        </button>
      )}
    </div>

    {showBreadcrumbs && breadcrumbs.length > 0 && (
      <div class="border-t border-border py-3">
        <nav aria-label="Breadcrumb" class="flex items-center space-x-2 text-sm">
          {breadcrumbs.map((crumb, index) => (
            <div class="flex items-center space-x-2">
              {index > 0 && (
                <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              )}
              <a
                href={crumb.href}
                class={`transition-colors duration-200 ${
                  index === breadcrumbs.length - 1
                    ? 'text-foreground font-medium'
                    : 'text-muted-foreground hover:text-foreground'
                }`}
                aria-current={index === breadcrumbs.length - 1 ? 'page' : undefined}
              >
                {crumb.name}
              </a>
            </div>
          ))}
        </nav>
      </div>
    )}
  </div>

  {showMobileDrawer && (
    <div 
      id="nav-mobile-drawer" 
      class="lg:hidden fixed inset-0 top-16 bg-background/95 backdrop-blur-sm transform translate-x-full transition-transform duration-300 ease-out z-40"
      style="will-change: transform;"
    >
      <div class="h-full overflow-y-auto">
        <div class="p-6 space-y-6">
          
          <a
            href="/"
            class={`flex items-center space-x-3 p-4 rounded-lg transition-all duration-200 ${
              isCurrentPage('home') || !currentPage
                ? 'bg-primary text-primary-foreground'
                : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
            }`}
            onclick="closeNavMobileDrawer()"
          >
            <span class="text-xl">üè†</span>
            <span class="font-medium">Home</span>
          </a>

          <div class="space-y-3">
            <h3 class="text-sm font-semibold text-foreground uppercase tracking-wider px-4">
              Components
            </h3>
            <div class="space-y-2">
              {navigationConfig.showcases.map(showcase => (
                <a
                  href={showcase.href}
                  class={`flex items-start space-x-3 p-4 rounded-lg transition-all duration-200 ${
                    isCurrentPage(showcase.name)
                      ? 'bg-primary text-primary-foreground'
                      : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                  }`}
                  onclick="closeNavMobileDrawer()"
                >
                  <span class="text-xl mt-0.5">{showcase.icon}</span>
                  <div class="flex-1 min-w-0">
                    <div class="font-medium flex items-center space-x-2">
                      <span>{showcase.title}</span>
                      {isCurrentPage(showcase.name) && (
                        <span class="text-xs bg-background/20 px-2 py-0.5 rounded">current</span>
                      )}
                      {showcase.name === 'business-demo' && (
                        <span class="text-xs bg-yellow-500 text-yellow-900 px-2 py-0.5 rounded">NEW</span>
                      )}
                    </div>
                    <div class="text-sm opacity-75 mt-1">
                      {showcase.description}
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </div>

          <div class="space-y-3">
            <h3 class="text-sm font-semibold text-foreground uppercase tracking-wider px-4">
              Resources
            </h3>
            <div class="space-y-2">
              {navigationConfig.resources.map(resource => (
                <a
                  href={resource.href}
                  class="flex items-center space-x-3 p-4 rounded-lg text-muted-foreground hover:text-foreground hover:bg-muted/50 transition-all duration-200"
                  onclick="closeNavMobileDrawer()"
                >
                  <span class="text-xl">{resource.icon}</span>
                  <div>
                    <div class="font-medium">{resource.title}</div>
                    <div class="text-sm opacity-75">{resource.description}</div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )}

  {showMobileDrawer && (
    <div 
      id="nav-mobile-backdrop"
      class="lg:hidden fixed inset-0 bg-background/50 opacity-0 invisible transition-all duration-300 z-30"
      onclick="closeNavMobileDrawer()"
    ></div>
  )}
</nav>

<script>
  // TypeScript-compliant declarations
  declare global {
    interface Window {
      toggleNavMobileDrawer: () => void;
      openNavMobileDrawer: () => void;
      closeNavMobileDrawer: () => void;
    }
  }

  let isNavDrawerOpen = false;

  function toggleNavMobileDrawer(): void {
    const drawer = document.getElementById('nav-mobile-drawer');
    const backdrop = document.getElementById('nav-mobile-backdrop');
    const button = document.getElementById('nav-mobile-menu-button');
    
    if (!drawer || !backdrop || !button) return;

    isNavDrawerOpen = !isNavDrawerOpen;
    
    if (isNavDrawerOpen) {
      openNavMobileDrawer();
    } else {
      closeNavMobileDrawer();
    }
  }

  function openNavMobileDrawer(): void {
    const drawer = document.getElementById('nav-mobile-drawer');
    const backdrop = document.getElementById('nav-mobile-backdrop');
    
    if (drawer && backdrop) {
      drawer.style.transform = 'translateX(0)';
      backdrop.classList.remove('opacity-0', 'invisible');
      backdrop.classList.add('opacity-100', 'visible');
      
      document.body.style.overflow = 'hidden';
      isNavDrawerOpen = true;
    }
  }

  function closeNavMobileDrawer(): void {
    const drawer = document.getElementById('nav-mobile-drawer');
    const backdrop = document.getElementById('nav-mobile-backdrop');
    
    if (drawer && backdrop) {
      drawer.style.transform = 'translateX(100%)';
      backdrop.classList.remove('opacity-100', 'visible');
      backdrop.classList.add('opacity-0', 'invisible');
      
      document.body.style.overflow = '';
      isNavDrawerOpen = false;
    }
  }

  function handleNavKeyNavigation(event: KeyboardEvent): void {
    if (event.key === 'Escape' && isNavDrawerOpen) {
      closeNavMobileDrawer();
    }
  }

  // Event listeners
  if (typeof document !== 'undefined') {
    document.addEventListener('keydown', handleNavKeyNavigation);
  }

  // Global window assignments
  if (typeof window !== 'undefined') {
    window.toggleNavMobileDrawer = toggleNavMobileDrawer;
    window.openNavMobileDrawer = openNavMobileDrawer;
    window.closeNavMobileDrawer = closeNavMobileDrawer;
  }
</script>

<style>
  nav a:hover {
    transform: translateY(-1px);
  }
  
  nav a,
  nav button {
    transition: all 0.2s ease-in-out;
  }
  
  nav .group:hover .group-hover\:opacity-100 {
    animation: fadeInUp 0.3s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  #nav-mobile-drawer {
    will-change: transform;
  }
  
  nav a:focus-visible,
  nav button:focus-visible {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
    border-radius: 6px;
  }
</style>