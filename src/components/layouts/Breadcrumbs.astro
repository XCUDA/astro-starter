---
// Breadcrumbs.astro - Automatic Hierarchical Navigation Component
// Generates breadcrumbs based on URL structure and page metadata
// Path: src/components/layouts/Breadcrumbs.astro

export interface Props {
  variant?: 'default' | 'minimal' | 'business' | 'ecommerce';
  showHome?: boolean;
  showIcons?: boolean;
  maxItems?: number;
  customBreadcrumbs?: Array<{
    name: string;
    href: string;
    icon?: string;
  }>;
  currentPageTitle?: string;
}

const { 
  variant = 'default',
  showHome = true,
  showIcons = true,
  maxItems = 5,
  customBreadcrumbs,
  currentPageTitle
} = Astro.props;

// Breadcrumb item interface for type safety
interface BreadcrumbItem {
  name: string;
  href: string;
  icon?: string;
  current?: boolean;
  ellipsis?: boolean;
}

// Site page information interface
interface PageInfo {
  name: string;
  icon: string;
  parent?: string;
  category?: string;
}

// Site structure mapping for intelligent breadcrumb generation
const siteStructure: Record<string, PageInfo> = {
  // Main sections
  '': { name: 'Home', icon: '🏠' },
  'home': { name: 'Home', icon: '🏠' },
  
  // Showcases
  'form-showcase': { 
    name: 'Form Components', 
    icon: '📝',
    parent: 'components',
    category: 'Components'
  },
  'navigation-showcase': { 
    name: 'Navigation & Feedback', 
    icon: '🧭',
    parent: 'components',
    category: 'Components'
  },
  'data-display-showcase': { 
    name: 'Data Display', 
    icon: '📊',
    parent: 'components',
    category: 'Components'
  },
  'advanced-showcase': { 
    name: 'Advanced Components', 
    icon: '🔮',
    parent: 'components',
    category: 'Components'
  },
  'components-showcase': { 
    name: 'All Components', 
    icon: '🧩',
    parent: 'components',
    category: 'Components'
  },
  
  // Business sections
  'about': { name: 'About Us', icon: '🏢' },
  'services': { name: 'Services', icon: '💼' },
  'contact': { name: 'Contact', icon: '📞' },
  'blog': { name: 'Blog', icon: '📝' },
  'portfolio': { name: 'Portfolio', icon: '🎨' },
  'team': { name: 'Team', icon: '👥' },
  
  // Documentation
  'docs': { name: 'Documentation', icon: '📚' },
  'quick-start': { 
    name: 'Quick Start', 
    icon: '⚡',
    parent: 'docs',
    category: 'Documentation'
  },
  'api': { 
    name: 'API Reference', 
    icon: '🔧',
    parent: 'docs',
    category: 'Documentation'
  },
  
  // Virtual categories
  'components': { name: 'Components', icon: '🧩' },
  
  // E-commerce sections
  'products': { name: 'Products', icon: '📦' },
  'categories': { name: 'Categories', icon: '📂' },
  'cart': { name: 'Shopping Cart', icon: '🛒' },
  'checkout': { name: 'Checkout', icon: '💳' },
  'account': { name: 'My Account', icon: '👤' },
  
  // Support sections
  'support': { name: 'Support', icon: '💬' },
  'faq': { 
    name: 'FAQ', 
    icon: '❓',
    parent: 'support',
    category: 'Support'
  },
  'help': { 
    name: 'Help Center', 
    icon: '🆘',
    parent: 'support',
    category: 'Support'
  }
};

// Generate breadcrumbs from URL or custom props
function generateBreadcrumbs(): BreadcrumbItem[] {
  if (customBreadcrumbs) {
    return showHome 
      ? [{ name: 'Home', href: '/', icon: '🏠' }, ...customBreadcrumbs]
      : customBreadcrumbs;
  }

  const pathname = Astro.url.pathname;
  const segments = pathname.split('/').filter(segment => segment !== '');
  
  if (segments.length === 0) {
    return showHome ? [{ name: 'Home', href: '/', icon: '🏠' }] : [];
  }

  const breadcrumbs: BreadcrumbItem[] = [];
  
  // Always add home if enabled
  if (showHome) {
    breadcrumbs.push({ name: 'Home', href: '/', icon: '🏠' });
  }

  // Build breadcrumb path
  let currentPath = '';
  
  segments.forEach((segment, index) => {
    currentPath += `/${segment}`;
    const pageInfo = siteStructure[segment];
    
    if (pageInfo) {
      // Add parent category if it doesn't exist in breadcrumbs yet
      if (pageInfo.parent && !breadcrumbs.find(b => b.href.includes(pageInfo.parent!))) {
        const parentInfo = siteStructure[pageInfo.parent];
        if (parentInfo) {
          breadcrumbs.push({
            name: parentInfo.name,
            href: `/${pageInfo.parent}`,
            icon: showIcons ? parentInfo.icon : undefined
          });
        }
      }
      
      // Add current segment
      breadcrumbs.push({
        name: pageInfo.name,
        href: currentPath,
        icon: showIcons ? pageInfo.icon : undefined,
        current: index === segments.length - 1
      });
    } else {
      // Fallback for unknown segments
      const displayName = segment
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
      
      breadcrumbs.push({
        name: currentPageTitle || displayName,
        href: currentPath,
        icon: showIcons ? '📄' : undefined,
        current: index === segments.length - 1
      });
    }
  });

  // Trim to max items if necessary
  if (breadcrumbs.length > maxItems) {
    const start = breadcrumbs.slice(0, 1); // Keep home
    const end = breadcrumbs.slice(-2); // Keep last 2
    const middle: BreadcrumbItem[] = breadcrumbs.length > maxItems ? [{ name: '...', href: '#', ellipsis: true }] : [];
    
    return [...start, ...middle, ...end];
  }

  return breadcrumbs;
}

const breadcrumbs = generateBreadcrumbs();

// Variant styles
const variantStyles = {
  default: "bg-muted/30 border border-border",
  minimal: "bg-transparent",
  business: "bg-card/50 border-b border-border",
  ecommerce: "bg-gradient-to-r from-muted/30 to-muted/50 border border-border"
};

const containerStyle = variantStyles[variant];
---

{breadcrumbs.length > 1 && (
  <nav 
    aria-label="Breadcrumb navigation"
    class={`w-full transition-all duration-300 ${containerStyle}`}
  >
    <div class="container mx-auto px-4 py-3">
      <ol class="flex items-center space-x-2 text-sm" role="list">
        {breadcrumbs.map((crumb, index) => (
          <li class="flex items-center space-x-2" role="listitem">

            {/* Separator (except for first item) */}
            {index > 0 && !crumb.ellipsis && (
              <svg 
                class="w-4 h-4 text-muted-foreground flex-shrink-0" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            )}

            {/* Ellipsis for truncated breadcrumbs */}
            {crumb.ellipsis ? (
              <span class="text-muted-foreground px-2 py-1 rounded">
                {crumb.name}
              </span>
            ) : (
              // Breadcrumb Link/Current Item
              crumb.current ? (
                // Current page (not clickable)
                <span 
                  class="flex items-center space-x-2 font-medium text-foreground px-2 py-1 rounded bg-primary/10 border border-primary/20"
                  aria-current="page"
                >
                  {showIcons && crumb.icon && (
                    <span class="text-base" aria-hidden="true">{crumb.icon}</span>
                  )}
                  <span class="max-w-32 md:max-w-none truncate">{crumb.name}</span>
                </span>
              ) : (
                // Clickable breadcrumb link
                <a
                  href={crumb.href}
                  class="flex items-center space-x-2 text-muted-foreground hover:text-foreground px-2 py-1 rounded hover:bg-muted/50 transition-all duration-200 hover:scale-105"
                  aria-label={`Navigate to ${crumb.name}`}
                >
                  {showIcons && crumb.icon && (
                    <span class="text-base" aria-hidden="true">{crumb.icon}</span>
                  )}
                  <span class="max-w-32 md:max-w-none truncate">{crumb.name}</span>
                </a>
              )
            )}
          </li>
        ))}
      </ol>

      {/* Additional Context for Business/E-commerce variants */}
      {(variant === 'business' || variant === 'ecommerce') && breadcrumbs.length > 2 && (
        <div class="mt-2 flex items-center justify-between">
          <div class="text-xs text-muted-foreground">
            {breadcrumbs.find(b => b.current)?.name && (
              <span>You are here: <strong>{breadcrumbs.find(b => b.current)?.name}</strong></span>
            )}
          </div>

          {/* Quick Actions */}
          <div class="flex items-center space-x-3 text-xs">
            <button
              onclick="history.back()"
              class="text-muted-foreground hover:text-primary transition-colors flex items-center space-x-1"
              aria-label="Go back to previous page"
            >
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              <span class="hidden sm:inline">Back</span>
            </button>
            
            <a
              href="/"
              class="text-muted-foreground hover:text-primary transition-colors flex items-center space-x-1"
              aria-label="Go to homepage"
            >
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
              </svg>
              <span class="hidden sm:inline">Home</span>
            </a>
          </div>
        </div>
      )}
    </div>
  </nav>
)}

<!-- Structured Data for SEO -->
{breadcrumbs.length > 1 && (
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbs
      .filter(crumb => !crumb.ellipsis)
      .map((crumb, index) => ({
        "@type": "ListItem",
        "position": index + 1,
        "name": crumb.name,
        "item": crumb.href === '#' ? undefined : new URL(crumb.href, Astro.site).toString()
      }))
  })} />
)}

<style>
  /* Enhanced hover effects for breadcrumb links */
  nav a:hover {
    transform: translateY(-1px);
  }
  
  /* Smooth transitions for all interactive elements */
  nav a,
  nav button {
    transition: all 0.2s ease-in-out;
  }
  
  /* Enhanced focus styles for accessibility */
  nav a:focus-visible,
  nav button:focus-visible {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
    border-radius: 4px;
  }
  
  /* Truncation animation */
  .truncate:hover {
    overflow: visible;
    white-space: normal;
  }
</style>